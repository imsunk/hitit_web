<%@ page errorPage="error.jsp" contentType="text/html; charset=utf-8"%>hititmembers를 위한 모욕감을 주는 객체지향

동아리 회원여러분 안녕하세요. 

오늘부터 모욕감을 주는 객체지향을 가르칠 홍원기입니다.



우선 질문 몇가지로 시작하겠습니다.

1. 함수란 무엇인가?

2. 객체지향이란 무엇인가?

3. 프로그래밍은 왜 하는가?

이 질문에 답해보세요.


답할 수 있으셨나요?

또 질문입니다.

4. 나는 메인함수외에 함수를 만들어 본 적이 없다.

5. 내가 쓴 코드를 그림으로 설명할 수 없다.

6. 내가 쓴 코드를 말로 설명할 수 없다.




위의 3가지 질문에 답을 못하거나, 잘은 모르겠지만 교과서에 나온 내용을 읊으셨거나

4-6 번에 그렇다고 할수 밖에 없는 분들은

축하합니다.

당신은 250만원으로 들을 수 있는 6개 수업중 하나(c, c++, java, 프로그램구조와 해석)를 듣는 동안

잠시 예제코드 치는 노예가 되어 있었습니다.

자, 장면을 상상해보세요, 

만원권으로 

40만원이 꽉찬 돈봉투를

교수님께서 낚아채갑니다. 당신은 아무말도 할 수 없습니다.


아까우신가요?


그럼 수업을 시작하겠습니다.

( 이 강의는 함수와 객체지향, 추상화등에 대해 정확하지 않은 개념을 보이고 있습니다.
 하지만 기억에는 남습니다.)


객체지향 수업은 코드가 없이 이루어 집니다.

많은 학생들이 코딩과 개념을 헷갈리시는데, 둘은 분리해서 생각하는 것이 좋습니다.

개념: 모든 프로그램은 실행시 메인함수라는 것에서부터 시작한다.

코딩: int main(int argc, char* argv){} 와 같은 형태다

두개는 확실히 다른 문제 입니다.

개념을 아시면 코딩, 즉 함수의 형태와 쓰는 방식은 써보고 익숙해 지기만 하면 됩니다.


 이 이야기를 하는 이유는 코더와 프로그래머를 이야기 하기 위함입니다.


 취업시장에는 실업계 고등학교에서 C, C++과 같은 언어를 배우고, 졸업과 동시에 실무에 투입되어

코딩을한 4년차 경력의 실무자들이 있습니다. 저희가 졸업할때 만나는 사람들입니다.

그런데 컴퓨터 공학과에서 4년졸업한 사람들이 그사람들을 코딩으로 이길 수 있을까요?

절대 못이깁니다. 하루하루를 코딩으로 채워온 사람의 실력은 술먹고, 실무에는 별로 쓸모없는

예제 코딩을 하던 신입 프로그래머가 이길수가 없습니다. 


 심지어 컴퓨터 공학과에서 4년을 채운 사람들 중에 자기가 완성한 프로젝트(프로그램)이 하나라도

있는 사람이 얼마나 될까요? 저는 5%도 안된다고 봅니다. 물론 과제나 예제용으로 급조한

쓸모없는 프로그램은 치지 않습니다. 

 제가 사장이라면 왜 비싼 4년제 졸업한 코딩불구를 써야할까요? 아무것도 할줄 아는 것이 없는데?

100만원 주고 말잘듣는 고졸을 시키죠.

예를 들어보겠습니다. 김서방은 뒷동산에 임야가 있고 거기엔 나무가 150그루 있엇습니다. 목재가격이 올라

김서방은 목재를 팔아야겠다고 생각했습니다. 김서방은 10년간 나무를 베어온 종놈인 막돌이에게 나무를

모조리 베어오게 했습니다. 막돌이는 3일만에 나무를 모두 베어왔습니다. 그리고 10일후 김서방은 사망했습니다.


 자, 김서방이 사망한이유는 제쳐두고, 평행세계의 또다른 김서방은 같은 상황에서 산림청에서 10년을 수학한

박공부씨에게 나무를 베어오라 했습니다. 책값을 빚졌던 박공부씨는 김서방의 의뢰를 수락합니다.

하지만 10일이나 지나서야 돌아온 박공부씨는 겨우 75그루의 나무만 잘라왔습니다. 김서방은 삿대질을 하며

박공부씨를 욕했습니다.

 " 아니 왜이렇게 오래걸리고, 적게 잘라왔소? 이리 해서는 빚은 없던걸로 못해주겠소"

그러자 박공부는

 "내가 산림청에서 10년 수학한바, 이와 같은 산세는 바위과 적고 모래가 많으며 급경사라 나무를 모두베면

이달 중순쯤 오는비에 토사가 흘러 산사태가 날 것이오!"
 
 그렇습니다. 김서방은 산사태로 죽은 것입니다.


이 이야기는 고졸출신 코더를 무시하는 것도 아니고, 

"컴공과 우왕굳"

하는 것도 아닙니다. 사장님이 원하는 4년제 컴공과졸 프로그래머는 문제에 대해서 자기가 생각할 수 있는 

박공부와 같은 사람이지, 해오라는대로 해올줄만 아는 코더는 아닙니다.

하라는 대로 할줄만 아는 사람은 노예지 인간이 아닙니다.

자 생각해보세요, c 또는 c++, 혹은 java 시간에 책을 펼쳐놓고

예제코드를 처음부터 끝까지 치고 있는 당신이 보이십니까?

"어린이 여러분 자 바탕화면에서 비주얼 스튜디오라는 아이콘을 더블 클릭하시고

c++책 84쪽에 있는 예제 7-2번 코드를 20분동안 노예처럼 받아친다음에 

뭔지는 모르겠지만 F7한번 누르고 F5 한번 눌러주세요, 

검은 화면이 뜨면 잘 된거랍니다. 답이 3나왔나요

참쉽죠?"

이런건 초등학교 3학년도 영타만 칠 수 있으면 할 수 있습니다.

뭔진 모르겠지만요,

이런 상황이 벌어졌을때 자신이 하찮게 느껴지고, 뭔가 이것은 아닌 것 같다라는 생각이

드셨다면 아직 희망이 있습니다.

우선 객체지향 개념을 채우고, 코드는 나중에 격파하러 갑시다.


이번편은 1. 함수란 무엇인가? 만 진행하도록 하겠습니다.


코드가 없이 소설로 예를 들어보겠습니다.

소설가 A의 글입니다.

선호는 위도 38, 경도 40 분 30초 지점에서 서북방 방향을 향해 걸음을 옮기기 시작했다. 경사 30오르막길과 이어지는
내리막길을 통과한 후 7단의 계단을 올라가 유리문을 열고 왼쪽으로 돌아 밖으로 나가는 유리문으로 나왔다. 12칸으로
된 계단을 내려온 그는 방향을 북쪽 방향으로 2도만큼 돌린후 빨간 칠이되어있는 벽돌위를 40미터 걸어간후 나타난 나무계단
을 8칸 올라가 유리문을 열고 들어가 앉아있는 xx염색체의 인간에게 오른쪽 주머니에 들어있는 소가죽 2겹 사이에서
적갈색 종이 두장과 약간 굵은 동글넙적한 쇠를 내고 식권을 받았다.

소설가 B씨의 글입니다.

선호는 7호관에서 나와 후생관에서 밥을 먹기로 했다, 2500원짜리 특식이 오늘의 메뉴였다.

어느게 더 사람이 읽기 쉬울까요?

선호의 행동의 일거수 일투족을 알 수 있는 A의 글이 이해하기 쉬운가요? B의 글이 이해하기 쉬운가요?
A의 글이 만약 쉽게 느껴진다면 이어지는 A와 B의 글을 읽어보면 됩니다.

B>
래선이도 후생관에서 밥을 먹기로 했다 2500원짜리 특식이었다.
슬기도 후생관에서 밥을 먹기로 했다. 2500원짜리 특식이었다.
요한이도 후생관에서 밥을 먹기로 했다. 25000짜리특식이었다.

A>
래선이는 위도 38, 경도 40분 30초 지점에서 ....
슬기는 위도 38, 경도 40분 30초 지점에서 ....
요한이는 위도 38, 경도 40분 30초 지점에서... 아 안해!

여기서 소설가는 프로그래머이고, 래선, 슬기, 요한은 객체입니다. A의 경우보다 B의 경우가 더 이해하기 쉽고
나중에 사용할때 더 편한 것을 알 수 있습니다. 함수도 이렇습니다.

위의 예는 함수는 왜 써야하냐? 에는 답이 되지만 함수는 무엇인가에 대한 답은 안됩니다.

함수는 실은 초등학교 3학년때 수학익힘책에서 배웁니다.

입구에다 빨간공 세개를 넣으면

하얀공 세개가 나오는 상자 보신적 있을겁니다.

함수는 딱 그정도입니다. 무언가 넣으면 무언가 나오는 상자,

래선이가 후생관에서 밥을 먹는다 라고 소설에 쓰면(입력하면)
7호관에서 후생관까지 이어지는 길과 줄서서 기다리는 모양 식권을 사는 모습까지 머릿속에서 떠올립니다.(출력합니다)

이게 함수입니다.

당신이 소설가라면 마음에 드는 자주사용하는 문장들을 따로 분류해 놓을 수 있습니다.

( G)은 후생관에서 밥을 먹기로 했다. ()원짜리 ()이었다 {
	(G)은 위도 38, 경도 40분 30초 지점에서 ....
}

이게 함수입니다. 세부적인 하찮은 것들을 생각하지 않기위해서,
다음에 사용할때 편하기 위해서 큰 덩어리에 이름을 붙여 사용하는 것이 함수입니다.

위의 문제에서 상자를 그리면서 이런 설명이 생각 나셨다면 함수를 알고 계십니다.

처음 공부할때 절대로 책을 외우지 마세요, 자기나름의 개념으로 이해하세요

함수는 이름붙이기 입니다.




2. 번 문제로 가봅시다. 객체지향이란 무엇인가?

다시 소설로 봅니다.

A>

왼쪽 주머니에서 2500원을 꺼내서 탁자 위에 놓으면 폴리에스틸렌 포장의 탄수화물 덩어리를 준다.

B>
 
나는 죠리퐁 큰봉지를 2500원주고 샀다.


A의 경우는 왼쪽 주머니가 누구의 것인지 알 수 없습니다. 그것은 소설가만이 알고 있는 정보죠, 2500원을 탁자위에 놓으면
폴리에스틸렌 포장의 탄수화물 덩어리를 받습니다. 그것이 죠리퐁이라는 것도 소설가 만이 알고있는 정보입니다.
이 작가가 10년쯤 뒤에 이 문장을 다시 봤을때 누구 주머니에서 꺼냈고 탄수화물 덩어리의 정체를 알 수 있을까요?
c의 예제에 쩔어있는 분들은 실은 A라는 작가와 같습니다. 잠깐만 문맥을 놓치면 이게 어떻게 돌아가는지 잊어서
처음부터 글을 다시 읽어야 합니다.

B의 경우는 매우 명료합니다.

나 라는 사람은 산다는 행동을 할 수 있습니다. 그 대가로 2500원을 줬죠, 그 결과 죠리퐁 큰 봉지를 얻었습니다.
A의 경우에서 죠리퐁이라는 것을 알 수 있을까요? 10년후에도 20년 후에봐도 B의 작가는 혹은 남이라도
나 라는 사람이 산다는 행동을 할 수 있고, 산 것이 죠리퐁이라는 것을 알 수 있습니다.

함수에서 조금더 나아가서 이것은 어떤 주체와, 그놈이 할 수있는 능력을 한덩어리로 생각해서 이름을 붙이는 것 입니다.

A>

탄수화물, 지방 단백질로 이루어진 78킬로의 물체가 다리 밑에 존재했었다.

B>

건장한 거지하나가 다리밑에 살고 있었다.

여기서 거지는 산다는 행도를 할 수 있습니다.

탄수화물, 지방, 단백질로 이루어진 78킬로의 물체가 존재 할 수 있었나요?
탄수화물이 존재하고, 지방이 존재하고 단백질이 존재했나요?

이렇게 말도안되게 저층부에서 생각하지 말고 사람처럼 생각합시다.

어떤 주체와 할수 있는 일을 합쳐 덩어리로 생각해서 이름을 붙이는 것,

예를 들면 사람을 패는 일을 할수 있는 건장한 남성을 깡패라고 부르는 것

이것이 객체지향입니다. 사람이라면 할 수 있어요.

객체? 오브젝트? 인스턴스? 뭐?

모르는 이야기 하지 맙시다.

덩어리지어서, 이름붙여서 사람처럼 생각하는것 그게 객체지향입니다.

객체지향의 세부속성들도 마찬가지 입니다.





3번 문제 프로그래밍은 왜 하는가 입니다.

프로그래밍은 편하려고 합니다. 내가 한번 한일, 할줄은 알지만 다시하고 싶지 않은 일을
컴퓨터한테 시켜서 노예처럼 부리고 싶을 때 하는 것이 프로그래밍 입니다.
 그러려면 그 하기 싫은 짓은 한번은 해야되는데 그 한번을 하는게 프로그래머 입니다.

예를 들어 보겠습니다.

나이 56세의 김봉팔씨는 12살짜리 손주와 장기두는 것을 즐깁니다. 그런데 손주가 장기 룰을 잘
알지 못해서, 할아버지 말은 어디로 움직일수있어?, 코끼리는? 이렇게 물어보는 것에 지쳤습니다.
한번은 할 수 있지만 여러번은 귀찮은 것입니다. 50세의 이른 퇴직전 프로그래머로 일했던 김봉팔씨는
LCD 디스플레이 장기판을 만들어, 장기알에 손을 대면 이동 가능 칸을 빛나게 하는 기능을 넣습니다.

또다른 예를 들면

37세의 김육자씨는 선을 매우 많이 보았습니다. 술을 먹으면 10원짜리 화투를 치는 버릇이 있는 김육자씨는
자신과 공통의 혹은 비슷한 취미를 가진 남성을 찾아내 만남을 갖고 싶습니다. 비슷한 버릇이 있는 이성을
찾기 위해 필요한 것은 성별과, 연락처, 그리고 취미 입니다. 프로그래머라면, 소프트웨어 개발자라면 여기에서
비록 실제로 코딩을 못하더라도, 다수의 미혼 남/여성에게 비슷한 취미의 전화번호를 제공해야하는데, 어떤식으로
다른 이성을 찾아낼지를 생각해 봐야합니다.

화면을 누르면 전화가 걸어진다던지, 연락처가 문자로 온다던지, 그것은 코딩을 하지 않아도 생각 할 수 있는
부분입니다. 코드는 책이나, 웹에 널려있어요.

기능 구현은 언제나 할수 있습니다. 남이 했다면 나도 할 수 있습니다. 그것은 코더가 하는 일이죠.

하지만 장기알이 갈 수 있는 길을 저장해야겠다, 미혼자의 연락처를 찾고 공유하게 해야겠다등, 현실세계, 혹은 게임, 가상세계의
특정상황에서 필요한 데이터가 무엇이고, 각 이용자나, 객체가 어떻게 움직어야할지
구상을 해보는것(설계하는 것)은 프로그래머가 하는 일입니다.

프로그래머라면, 특정상황에서 데이터로 옮겨야 하는 관계 및 정보가 무엇인지 알아낼 수 있어야 합니다.
